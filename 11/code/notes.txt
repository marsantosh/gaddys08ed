#
#                       On static members of classes
#
The `this` pointer cannot be used in a static member function, because
static member functions are not called through any instance of their class.
Moreover, a static member function acannot access an instance member
of its class unless it specifies what instance the member belongs to.
An advantage of static member functions is they can be called before any instances of the
class have been created. This allows them to be used to perform complex initialization
tasks that have to be done before objects of the class have been created.


# 
#                             Friends of Classes
#
# Concept:
A friend is a function that is not a member of a class, but has 
acces to the private members of the class.


#
#                           Memberwise Assignment
#
The = operator may be used to assign one object to another, or to initialize
one object with another object’s data. By default, each member of one
object is copied to its counterpart in the other object.


#
#                             Copy Constructors
#
A copy constructor is a special constructor that is called
whenever a new object is created and initialized with the data of 
another object of the same class.
If the programmer does not specify a copy constructor for the class, then the compiler
automatically calls a default copy constructor. This default copy constructor simply copies
the data of the existing object to the new object using memberwise assignment.
In general, classes with pointer
members will not behave correctly under the default copy constructor provided by the
compiler. They must be provided with a copy constructor written by the programmer.


#
#                             Convert Constructors
#
In addition to providing a means for the creation of objects, convert Constructors
provide a way for the compuiler to convert a value of a fiven type
to an object of the class.
Convert Constructors are automatically invoked by the compiler whenever the
context demands a class object but a value of construtor's parameter type
is provided. This occurs in four different contexts:
    1. An object of the class is initialized with a value of the convert
       constructor's parameter type.
    2. An object of the class is assigned a value fo the convert contructor's
       parameter type.
    3. A function expecting a value parameter of the class type is instead passed
       a value of the constructor's parameter type.
    4. A function that declares a return value of the class type actually returns
       a value of the convert constructor's parameter type.


#
#                          Aggregation and Composition
#
Class aggregation occurs when an object of one class owns an object of
another class. Class composition is a form of aggregation where the owner class
controls the lfietime of objects of the owned class.


# 
#                                   Inheritance
#
When an is-a relationship exists between objects, it means that the specialized object has
all of the characteristics of the general object, plus additional characteristics that make it
special. In object-oriented programming, inheritance is used to create an is-a relationship
between classes.
Inheritance involves a base class and a derived class. The base class is the general class and
the derived class is the specialized class. The derived class is based on, or derived from, the
base class. You can think of the base class as the parent and the derived class as the child.


#
#                       Protected Members and Class Access
#
Protected members of a base class are like private members, except they
may be accessed by derived classes. The base class access specification
determines how private, protected, and public base class members are
accessed when they are inherited by the derived class.
C++ provides a third access specification, protected . Protected members of a base class
are like private members, except they may be accessed by member functions of a derived
class. Protected members are inaccessible to all other code in the program.*
* Friend functions and friend classes have access to both private and protected members.


#
#                          Base Class Access Specifications
#
private:
   • Private members of the base class are inaccessible to the derived class.
   • Protected members of the base class become private members of the derived class.
   • Public members of the base class become private members of the derived class.
protected:
   • Private members of the base class are inaccessible to the derived class.
   • Protected members of the base class become protected members of the derived class.
   • Public members of the base class become protected members of the derived class.
public:
   • Private members of the base class are inaccessible to the derived class.
   • Protected members of the base class become protected members of the derived class.
   • Public members of the base class become public members of the derived class.


#
#                     Constructors, Destructors and Inheritance
#
When an object of a derived class is being instantiated, the base class
constructor is called before the derived class constructor. When the object is
destroyed, the derived class destructor is called before the base class
destructor.

#
#                          Overriding Base Class Functions
#
A derived class can override a member function of its base class by defining
a derived class member function with the same name and parameter list.
An object of a derived class that has overridden a base class member function contains
more than one version of the member function. The compiler will determine which of the
several versions to call by using type information in the expression used to make the call to
the member function.

#
#                The Difference Between Overloading and Overriding
#
Both overloading and overriding involve the definition of different functions with the same
name. There are differences between the two concepts, however. Overriding can only be
done in the context of inheritance and refers to the defining of a member function by a
derived class when the base class already has a member function of the same name and
parameter list. Overloading refers to the definition of different functions within the same
class with the same name and different parameter lists. Overloading can also refer to the
definition of different functions with different parameter lists at the global level.
** Gaining Access to an Overridden Member Function
If a derived class overrides a base class member function, member functions of the derived
class that would have otherwise called the overridden base class member function will now
call the version in the derived class. It is occasionally useful to be able to call the
overridden version. In fact, the new member function of the derived class may want to call
the base class member function that it is overriding. This is done by using the scope
resolution operator to specify the class of the overridden member function being accessed.
